# syntax = docker/dockerfile:1.2.1
FROM ubuntu:latest AS runnertest
LABEL authors="zac16530@gmail.com"

ARG DEBIAN_FRONTEND=noninteractive
ENV GRADLE_HOME /opt/gradle
  
# Dont delete downloaded packages
RUN rm -f /etc/apt/apt.conf.d/docker-clean

RUN --mount=type=cache,target=/var/cache/apt \
apt-get update && \
apt-get upgrade -y && \
apt-get install -y nano vim && \
apt-get clean

ARG JAVA_VERSION=17

RUN --mount=type=cache,target=/var/cache/apt/java \
apt-get install -y openjdk-${JAVA_VERSION}-jdk && \
apt-get clean

RUN apt-get install -y \
--no-install-recommends \
unzip \
wget \
git \
git-lfs \
openssh-client \
apt-transport-https \
wget \
software-properties-common && \
apt-get clean

# Env to download
ENV GITURLS ""

ENV GRADLE_VERSION 7.3.3
ARG GRADLE_DOWNLOAD_SHA256=b586e04868a22fd817c8971330fec37e298f3242eb85c374181b12d637f80302
  
  
# Setup JAVA_HOME -- useful for docker commandline
ENV JAVA_HOME /usr/lib/jvm/java-${JAVA_VERSION}-openjdk-amd64/
RUN export JAVA_HOME
  
# Set up Gradle
# Got from https://github.com/keeganwitt/docker-gradle

RUN set -o errexit -o nounset \
&& echo "Downloading Gradle" \
&& wget --no-verbose --output-document=gradle.zip "https://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-bin.zip" \
\
&& echo "Checking download hash" \
&& echo "${GRADLE_DOWNLOAD_SHA256} *gradle.zip" | sha256sum --check - \
\
&& echo "Installing Gradle" \
&& unzip gradle.zip \
&& rm gradle.zip \
&& mv "gradle-${GRADLE_VERSION}" "${GRADLE_HOME}/" \
&& ln --symbolic "${GRADLE_HOME}/bin/gradle" /usr/bin/gradle \
\
&& echo "Testing Gradle installation" \
&& gradle --version
  
  # Set up Dotnet Core
RUN --mount=type=cache,target=/var/cache/dotnetCore \
wget https://packages.microsoft.com/config/ubuntu/21.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb && \
dpkg -i packages-microsoft-prod.deb &&\
rm packages-microsoft-prod.deb &&\
apt-get update; \
apt-get -y --no-install-recommends install dotnet-runtime-6.0 &&\
apt-get clean &&\
echo "Testing Dotnet Install" &&\
which dotnet
  
  # Set up C++ and toolchains
ENV CMAKE_VERSION 3.22.2

RUN apt-get install -y --no-install-recommends build-essential libssl-dev gcc g++ gdb ninja-build doxygen graphviz googletest &&\
apt-get clean &&\
which gcc 

RUN wget https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}.tar.gz &&\
tar -zxf cmake-${CMAKE_VERSION}.tar.gz &&\
cd cmake-${CMAKE_VERSION} &&\
./bootstrap &&\
make &&\
make install &&\
which cmake &&\
cmake --version &&\
rm /cmake-${CMAKE_VERSION}.tar.gz &&\
rm /cmake-${CMAKE_VERSION} -r

# Set up the folders for grading c++
RUN mkdir /opt/cmake && mkdir /opt/cmake/cmake-build-debug

# Install python for grading
RUN apt-get install -y python3-pip &&\
apt-get clean &&\
which python3

# Install python packages
RUN python3 -m pip install virtualenv

# Install PowerShell for automation scripts
# https://docs.microsoft.com/en-us/powershell/scripting/install/install-ubuntu?view=powershell-7.2
#RUN wget -q https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb && \
#dpkg -i packages-microsoft-prod.deb && \
#apt-get update && \
#apt-get install -y powershell && \
#apt-get clean

COPY GradeAssignments.go /

#ENTRYPOINT ["go", "run", "/GradeAssignments.go"]

